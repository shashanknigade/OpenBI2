{"version":3,"sources":["logo.svg","components/navigation.js","components/Home/home.js","components/link.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","Navbar","bg","variant","expand","width","Brand","href","src","height","className","alt","Toggle","aria-controls","Collapse","id","Nav","Link","NavDropdown","title","Item","Divider","Component","Home","this","callapi","setState","api","path","alert","Jumbotron","Button","onClick","nextPath","LinkPage","App","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,iNCI9BC,EAAb,uKAEI,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,KAAKC,MAAM,OACjD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,KACjB,yBACEC,IAAI,0BACJH,MAAM,KACNI,OAAO,KACPC,UAAU,iBACVC,IAAI,WANR,WASA,kBAACV,EAAA,EAAOW,OAAR,CAAeC,gBAAc,qBAC7B,kBAACZ,EAAA,EAAOa,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKN,UAAU,WACb,kBAACM,EAAA,EAAIC,KAAL,CAAUV,KAAK,KAAf,QACA,kBAACS,EAAA,EAAIC,KAAL,CAAUV,KAAK,SAAf,iBACA,kBAACW,EAAA,EAAD,CAAaC,MAAM,OAAOJ,GAAG,sBAC3B,kBAACG,EAAA,EAAYE,KAAb,CAAkBb,KAAK,eAAvB,mBACA,kBAACW,EAAA,EAAYE,KAAb,CAAkBb,KAAK,eAAvB,oBAGA,kBAACW,EAAA,EAAYE,KAAb,CAAkBb,KAAK,eAAvB,iBACA,kBAACW,EAAA,EAAYG,QAAb,MACA,kBAACH,EAAA,EAAYE,KAAb,CAAkBb,KAAK,eAAvB,wBAzBd,GAAgCe,a,gBCEnBC,G,MAAb,kLAEIC,KAAKC,YAFT,gCAMID,KAAKE,SAAS,CAAEC,IAAK,yBANzB,+BASWC,GACPC,MAAM,QAVV,+BAeY,IAAD,OAEP,OACE,yBAAKnB,UAAU,mBAAf,SAEE,kBAACoB,EAAA,EAAD,KACE,yEACA,oFACA,2BACE,kBAACC,EAAA,EAAD,CACE5B,QAAQ,YACR6B,QAAS,kBAAM,EAAKC,SAAS,eAF/B,wBAQJ,yBAAKvB,UAAU,OACb,yBAAKA,UAAU,YACb,kBAACoB,EAAA,EAAD,CAAWpB,UAAU,oBACnB,kEACA,2BACE,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,mBAAd,sBACA,wBAAIA,UAAU,mBAAd,kBACA,wBAAIA,UAAU,mBAAd,mCACA,wBAAIA,UAAU,mBAAd,4BAKR,yBAAKA,UAAU,YACb,yBACEF,IAAI,6BACJE,UAAU,mCAjDxB,GAA0BY,cCHbY,EAAb,uKAII,OACE,kBAACJ,EAAA,EAAD,KACE,0DANR,GAA8BR,aCqBfa,MAff,WACE,OACE,kBAAC,IAAD,KACE,yBAAKzB,UAAU,4BACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMkB,KAAK,IAAIQ,UAAWb,EAAMc,OAAK,IACrC,kBAAC,IAAD,CAAMT,KAAK,QAAQQ,UAAWF,EAAUG,OAAK,QCJnCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.43e38eef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\n\nexport class Navigation extends Component {\n  render() {\n    return (\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" width=\"90%\">\n        <Navbar.Brand href=\"/\">\n          <img\n            src=\"/static/openbi_logo.jpg\"\n            width=\"50\"\n            height=\"40\"\n            className=\"d-inline-block\"\n            alt=\"OpenBI\"\n          /> OpenBI\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/\">Home</Nav.Link>\n            <Nav.Link href=\"/link\">My Workspaces</Nav.Link>\n            <NavDropdown title=\"Help\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">About Workspace</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.2\">\n                Supported Graphs\n              </NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.3\">About Sharing</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.4\">\n                About OpenBI\n              </NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Navbar, Nav, Jumbotron, Button } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./home.css\";\n\nexport class Home extends Component {\n  componentDidMount() {\n    this.callapi();\n  }\n\n  callapi() {\n    this.setState({ api: \"Test please ignore\" });\n  }\n\n  nextPath(path) {\n    alert(\"Hi\");\n    //history = useHistory();\n    //history.push(\"/test\");\n  }\n\n  render() {\n    //const {api} = this.state.api\n    return (\n      <div className=\"container-fluid\">\n        â‰ˆ\n        <Jumbotron>\n          <h1>Welcome to OpenBI, an open source BI tool</h1>\n          <p>Go to workspace and start creating your own dashboard</p>\n          <p>\n            <Button\n              variant=\"secondary\"\n              onClick={() => this.nextPath(\"/the/path\")}\n            >\n              Go to My Workspace\n            </Button>\n          </p>\n        </Jumbotron>\n        <div className=\"row\">\n          <div className=\"col-lg-6\">\n            <Jumbotron className=\"jb-dashboardinfo\">\n              <h2>Build dashboards easily in 5 steps</h2>\n              <p>\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">1. Select Template</li>\n                  <li className=\"list-group-item\">2. Upload Data</li>\n                  <li className=\"list-group-item\">3. Configure Dashboard Sections</li>\n                  <li className=\"list-group-item\">4. Share with others</li>\n                </ul>\n              </p>\n            </Jumbotron>\n          </div>\n          <div className=\"col-lg-6\">\n            <img\n              src=\"/static/home/dashboard.png\"\n              className=\"img-fluid img-dashboard\"\n            ></img>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Jumbotron } from \"react-bootstrap\";\n\nexport class LinkPage extends Component {\n  \n  render() {\n    //const {api} = this.state.api\n    return (\n      <Jumbotron>\n        <h1>Welcome to links page</h1>\n      </Jumbotron>\n    );\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {BrowserRouter, Route, Switch, Link} from 'react-router-dom'\nimport {Navigation} from './components/navigation'\nimport {Home} from './components/Home/home'\nimport {LinkPage} from './components/link'\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"container main-container\">\n        <Navigation />\n        <Switch>\n          <Link path='/' component={Home} exact></Link>\n          <Link path='/link' component={LinkPage} exact></Link>\n        </Switch>\n      </div>\n    </BrowserRouter>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}